from typing import Any, Text, Dict, List
import sqlite3
import datetime
import re
import logging
import requests
from dateutil.relativedelta import relativedelta
from datetime import datetime as dt
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s",
    handlers=[logging.FileHandler("expense_tracker.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

DATABASE = 'expenses.db'

def init_db():
    """Initialize the database with expenses table."""
    try:
        with sqlite3.connect(DATABASE) as conn:
            c = conn.cursor()
            c.execute("""
                CREATE TABLE IF NOT EXISTS expenses (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    description TEXT,
                    amount REAL,
                    base_category TEXT,
                    date TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            """)
            c.execute("CREATE INDEX IF NOT EXISTS idx_category ON expenses (base_category)")
            c.execute("CREATE INDEX IF NOT EXISTS idx_date ON expenses (date)")
            conn.commit()
    except Exception as e:
        logger.exception("Database init error: %s", e)

init_db()

# Configure HTTP session with retries
session = requests.Session()
retry_strategy = Retry(
    total=3,
    backoff_factor=0.5,
    status_forcelist=[429, 500, 502, 503, 504]
)
adapter = HTTPAdapter(max_retries=retry_strategy)
session.mount("https://", adapter)

API_KEY = "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"
MODEL_NAME = "llama-3.3-70b-versatile"
GROQ_ENDPOINT = "https://api.groq.com/openai/v1/chat/completions"

def call_groq_api(text: str, prompt_type: str) -> str:
    """Call Groq API with enhanced prompts for expense processing."""
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    
    prompts = {
        "normalize": {
            "system": (
                "Normalize expense descriptions to 'Item - Amount' format. "
                "Correct typos, expand abbreviations. Return ONLY the normalized text."
            ),
            "user": f"Input: '{text}'\nNormalized:"
        },
        "extract_category": {
            "system": (
                "Extract SPECIFIC purchase category as ONE lowercase word. "
                "Prioritize specific items (e.g., 'cappuccino', 'birthday_cake'). "
                "Use underscores for multi-word categories."
            ),
            "user": f"Extract category from: '{text}'\nCategory:"
        },
        "extract_date": {
            "system": (
                "Convert time references to ISO date ranges (start,end). "
                "Recognize: today, week, month, year, 'january', 'last 3 days'. "
                "Return dates in YYYY-MM-DD format separated by comma. "
                "Default to all time (1970-01-01,today) if unclear."
            ),
            "user": f"Query: '{text}'\nDate Range:"
        }
    }
    
    try:
        if prompt_type == "extract_date":
            response = session.post(
                GROQ_ENDPOINT,
                json={
                    "model": MODEL_NAME,
                    "messages": [
                        {"role": "system", "content": prompts["extract_date"]["system"]},
                        {"role": "user", "content": prompts["extract_date"]["user"]}
                    ],
                    "temperature": 0.1,
                    "max_tokens": 40
                },
                headers=headers,
                timeout=8
            )
            response.raise_for_status()
            date_range = response.json()["choices"][0]["message"]["content"].strip()
            return parse_date_range(date_range)
            
        elif prompt_type in prompts:
            response = session.post(
                GROQ_ENDPOINT,
                json={
                    "model": MODEL_NAME,
                    "messages": [
                        {"role": "system", "content": prompts[prompt_type]["system"]},
                        {"role": "user", "content": prompts[prompt_type]["user"]}
                    ],
                    "temperature": 0.2,
                    "max_tokens": 30
                },
                headers=headers,
                timeout=10
            )
            response.raise_for_status()
            raw_output = response.json()["choices"][0]["message"]["content"].strip()
            
            if prompt_type == "extract_category":
                category = re.sub(r"\W+", "_", raw_output.lower().split()[0])
                return category[:20]  # Limit category length
                
            return re.sub(r'["\n].*', "", raw_output).strip()

    except Exception as e:
        logger.error("Groq API error: %s", str(e))
    
    # Fallback values
    if prompt_type == "extract_date":
        return ('1970-01-01', dt.today().date().isoformat())
    return text

def parse_date_range(date_str: str) -> tuple:
    """Convert date range string to start/end dates"""
    try:
        if ',' in date_str:
            start_str, end_str = date_str.split(',', 1)
            start_date = dt.strptime(start_str.strip(), "%Y-%m-%d").date()
            end_date = dt.strptime(end_str.strip(), "%Y-%m-%d").date()
            return (start_date.isoformat(), end_date.isoformat())
    except:
        pass
    
    # Default to all time
    return ('1970-01-01', dt.today().date().isoformat())

class ActionAddExpense(Action):
    def name(self) -> Text:
        return "action_add_expense"
    
    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        user_message = tracker.latest_message.get('text', '')
        logger.info("Processing: %s", user_message)
        
        try:
            normalized = call_groq_api(user_message, "normalize")
            segments = re.split(r"\s*[+,&]\s+|\s+and\s+", normalized, flags=re.IGNORECASE)
            success_count = 0
            
            for seg in segments:
                seg = seg.strip()
                if not seg:
                    continue
                
                # Enhanced amount parsing
                amount_match = re.search(
                    r"(?:₹|\$|rs?\.?\s?|rupees?\s?)(\d+\.?\d{0,2})"
                    r"|(\d+\.?\d{0,2})\s?(?:₹|\$|rs?|rupees?)"
                    r"|(\d+\.?\d{1,2})\b(?!\s*\%)(?=\s|$)",
                    seg,
                    re.IGNORECASE
                )
                
                if not amount_match:
                    continue
                
                try:
                    amount_str = next((g for g in amount_match.groups() if g), None)
                    amount = round(float(amount_str), 2)
                    description = re.sub(r"\b(?:₹|\$|rs?|rupees?)\b", "", seg, flags=re.IGNORECASE).strip()
                    category = call_groq_api(description, "extract_category") or "other"
                    
                    with sqlite3.connect(DATABASE) as conn:
                        conn.execute("""
                            INSERT INTO expenses (description, amount, base_category, date)
                            VALUES (?, ?, ?, ?)
                        """, (
                            description[:50],
                            amount,
                            category,
                            datetime.date.today().isoformat()
                        ))
                    success_count += 1
                    logger.info("Recorded: %s - ₹%s (%s)", description, amount, category)
                    
                except Exception as e:
                    logger.error("Processing error: %s", str(e))
            
            if success_count > 0:
                dispatcher.utter_message(f"✅ Added {success_count} expense(s)")
            else:
                dispatcher.utter_message("❌ Couldn't find amounts in: 'Item ₹Amount' format")
                
        except Exception as e:
            logger.error("General error: %s", str(e))
            dispatcher.utter_message("⚠️ Error processing request. Try again.")
        
        return []

class ActionQueryExpense(Action):
    def name(self) -> Text:
        return "action_query_expense"
    
    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        try:
            query_text = tracker.latest_message.get('text', '').lower()
            
            if self._is_total_query(query_text):
                self._handle_total_expenses(dispatcher)
            elif self._is_top_expenses_query(query_text):
                self._handle_top_expenses(dispatcher, query_text)
            elif self._is_list_query(query_text):
                self._handle_list_expenses(dispatcher, query_text)
            else:
                self._handle_category_query(dispatcher, query_text)
        
        except Exception as e:
            logger.error("Query error: %s", str(e))
            dispatcher.utter_message("🔍 Couldn't retrieve expenses. Try again.")
        
        return []

    def _is_total_query(self, text: str) -> bool:
        return any(keyword in text for keyword in ['total', 'overall', 'sum'])

    def _is_top_expenses_query(self, text: str) -> bool:
        return any(keyword in text for keyword in ['biggest', 'largest', 'most expensive', 'top'])

    def _is_list_query(self, text: str) -> bool:
        return any(keyword in text for keyword in ['list', 'all', 'show me'])

    def _handle_category_query(self, dispatcher: CollectingDispatcher, query_text: str):
        category = call_groq_api(query_text, "extract_category")
        date_range = call_groq_api(query_text, "extract_date")
        
        with sqlite3.connect(DATABASE) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT 
                    description,
                    amount,
                    date
                FROM expenses 
                WHERE base_category = ? 
                AND date BETWEEN ? AND ?
                ORDER BY date DESC
            """, (category, date_range[0], date_range[1]))
            
            expenses = cursor.fetchall()
            
            if expenses:
                total = sum(row['amount'] for row in expenses)
                items = "\n".join(
                    f"- {row['description']} – ₹{row['amount']} ({row['date']})"
                    for row in expenses
                )
                response = (
                    f"📊 {category.replace('_', ' ').title()} Expenditure\n"
                    f"📅 Period: {date_range[0]} to {date_range[1]}\n"
                    f"💰 Total: ₹{total:.2f}\n\n"
                    f"Detailed breakdown:\n{items}"
                )
            else:
                response = f"📭 No {category.replace('_', ' ')} expenses found"
            
            dispatcher.utter_message(response)

    def _handle_total_expenses(self, dispatcher: CollectingDispatcher):
        with sqlite3.connect(DATABASE) as conn:
            cursor = conn.cursor()
            
            # Category breakdown
            cursor.execute("""
                SELECT 
                    base_category,
                    SUM(amount) as total,
                    COUNT(*) as count
                FROM expenses
                GROUP BY base_category
                ORDER BY total DESC
            """)
            
            categories = cursor.fetchall()
            grand_total = sum(cat[1] for cat in categories) if categories else 0
            
            if grand_total > 0:
                breakdown = "\n".join(
                    f"• {cat[0].replace('_', ' ').title()}: ₹{cat[1]:.2f} ({cat[2]} items)"
                    for cat in categories
                )
                response = (
                    f"💰 Total Expenditure Summary\n"
                    f"🏦 Grand Total: ₹{grand_total:.2f}\n\n"
                    f"Category Breakdown:\n{breakdown}"
                )
            else:
                response = "📭 No expenses recorded yet"
            
            dispatcher.utter_message(response)

    def _handle_top_expenses(self, dispatcher: CollectingDispatcher, query_text: str):
        date_range = call_groq_api(query_text, "extract_date")
        limit = 5 if any(word in query_text for word in ['week', 'day']) else 10
        
        with sqlite3.connect(DATABASE) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT description, amount, date 
                FROM expenses
                WHERE date BETWEEN ? AND ?
                ORDER BY amount DESC
                LIMIT ?
            """, (date_range[0], date_range[1], limit))
            
            expenses = cursor.fetchall()
            
            if expenses:
                items = "\n".join(
                    f"{idx+1}. {row['description']} – ₹{row['amount']} ({row['date']})"
                    for idx, row in enumerate(expenses)
                )
                response = (
                    f"🏆 Top {len(expenses)} Expenses\n"
                    f"📅 Period: {date_range[0]} to {date_range[1]}\n\n"
                    f"{items}"
                )
            else:
                response = "📭 No expenses found in this timeframe"
            
            dispatcher.utter_message(response)

    def _handle_list_expenses(self, dispatcher: CollectingDispatcher, query_text: str):
        category = call_groq_api(query_text, "extract_category")
        date_range = call_groq_api(query_text, "extract_date")
        
        with sqlite3.connect(DATABASE) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT description, amount, date 
                FROM expenses
                WHERE base_category = ?
                AND date BETWEEN ? AND ?
                ORDER BY date DESC
            """, (category, date_range[0], date_range[1]))
            
            expenses = cursor.fetchall()
            
            if expenses:
                items = "\n".join(
                    f"- {row['description']} – ₹{row['amount']} ({row['date']})"
                    for row in expenses
                )
                response = (
                    f"📋 All {category.replace('_', ' ').title()} Expenses\n"
                    f"📅 Period: {date_range[0]} to {date_range[1]}\n\n"
                    f"{items}"
                )
            else:
                response = f"📭 No {category.replace('_', ' ')} expenses found"
            
            dispatcher.utter_message(response)